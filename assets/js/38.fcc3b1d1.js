(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{323:function(t,e,i){t.exports=i.p+"assets/img/hooks.e3aa3e38.jpg"},626:function(t,e,i){"use strict";i.r(e);var v=i(44),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"git内部原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git内部原理"}},[t._v("#")]),t._v(" git内部原理")]),t._v(" "),v("blockquote",[v("ul",[v("li",[t._v("Git 是一个内容寻址文件系统（content-addressable filesystem）")]),t._v(" "),v("li",[t._v("Git 的核心部分是一个简单的键值对数据库（key-value data store）。 你可以向 Git 仓库中插入任意类型的内容，它会返回一个唯一的键，通过该键可以在任意时刻再次取回该内容。")]),t._v(" "),v("li",[t._v("它会输出一个长度为 40 个字符的校验和。 这是一个 SHA-1 哈希值——一个将待存储的数据外加一个头部信息（header）一起做 SHA-1 校验运算而得的校验和。")])])]),t._v(" "),v("h2",{attrs:{id:"git-init"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-init"}},[t._v("#")]),t._v(" git init")]),t._v(" "),v("p",[t._v("在执行 "),v("code",[t._v("git init")]),t._v(" 进行初始化时，会在 "),v("code",[t._v(".git/hooks")]),t._v(" 目录生成一系列的hooks脚本，用来控制git工作的流程。")]),t._v(" "),v("p",[v("img",{attrs:{src:i(323),alt:"git hooks"}})]),t._v(" "),v("h2",{attrs:{id:"自定义git"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自定义git"}},[t._v("#")]),t._v(" 自定义Git")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("钩子"),v("OutboundLink")],1),t._v("都被存储在 Git 目录下的 "),v("code",[t._v("hooks")]),t._v(" 子目录中。 也即绝大部分项目中的 "),v("code",[t._v(".git/hooks")]),t._v(" 。 当你用 "),v("code",[t._v("git init")]),t._v(" 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。")]),t._v(" "),v("h3",{attrs:{id:"客户端钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#客户端钩子"}},[t._v("#")]),t._v(" 客户端钩子")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("pre-commit")]),t._v("：在键入提交信息前运行。可以用"),v("code",[t._v("git commit --no-verify")]),t._v(" 来绕过这个环节")]),t._v(" "),v("li",[v("code",[t._v("prepare-commit-msg")])]),t._v(" "),v("li",[v("code",[t._v("commit-msg")]),t._v("：接收一个参数，此参数即上文提到的，存有当前提交信息的临时文件的路径。")]),t._v(" "),v("li",[v("code",[t._v("post-commit")]),t._v(" 钩子在整个提交过程完成后运行。")]),t._v(" "),v("li",[v("code",[t._v("pre-rebase")]),t._v(" 钩子运行于变基之前，以非零值退出可以中止变基的过程。")]),t._v(" "),v("li",[v("code",[t._v("post-rewrite")]),t._v(" 钩子被那些会替换提交记录的命令调用，比如 "),v("code",[t._v("git commit --amend")]),t._v(" 和 "),v("code",[t._v("git rebase")]),t._v("（不过不包括 "),v("code",[t._v("git filter-branch")]),t._v("）。")]),t._v(" "),v("li",[t._v("在 "),v("code",[t._v("git checkout")]),t._v(" 成功运行后，"),v("code",[t._v("post-checkout")]),t._v(" 钩子会被调用。")]),t._v(" "),v("li",[t._v("在 "),v("code",[t._v("git merge")]),t._v(" 成功运行后，"),v("code",[t._v("post-merge")]),t._v(" 钩子会被调用。")]),t._v(" "),v("li",[v("code",[t._v("pre-push")]),t._v(" 钩子会在 "),v("code",[t._v("git push")]),t._v(" 运行期间， 更新了远程引用但尚未传送对象时被调用。")])]),t._v(" "),v("h3",{attrs:{id:"服务端钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务端钩子"}},[t._v("#")]),t._v(" 服务端钩子")]),t._v(" "),v("ul",[v("li",[v("h4",{attrs:{id:"pre-receive"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#pre-receive"}},[t._v("#")]),t._v(" "),v("code",[t._v("pre-receive")])])]),t._v(" "),v("li",[v("h4",{attrs:{id:"update"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[t._v("#")]),t._v(" "),v("code",[t._v("update")])])]),t._v(" "),v("li",[v("h4",{attrs:{id:"post-receive"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#post-receive"}},[t._v("#")]),t._v(" "),v("code",[t._v("post-receive")])])])]),t._v(" "),v("h2",{attrs:{id:"参考文献"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://git-scm.com/book/zh/v2/ch00/ch10-git-internals",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 内部原理"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);